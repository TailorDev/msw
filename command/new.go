package command

import (
	"bytes"
	"flag"
	"fmt"
	"html/template"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/TailorDev/msw/issue"
	"github.com/mitchellh/cli"
)

// NewCommand is a Command that creates a new empty YAML file to prepare a new
// issue.
type NewCommand struct {
	UI cli.Ui
}

// Run runs the code of the comand.
func (c *NewCommand) Run(args []string) int {
	var dateArg string
	var directoryArg string

	cmdFlags := flag.NewFlagSet("new", flag.ContinueOnError)
	cmdFlags.Usage = func() { c.UI.Output(c.Help()) }
	cmdFlags.StringVar(&dateArg, "date", "", "date")
	cmdFlags.StringVar(&directoryArg, "directory", "", "directory")

	if err := cmdFlags.Parse(args); err != nil {
		return 1
	}

	args = cmdFlags.Args()
	if len(args) != 1 {
		cmdFlags.Usage()
		return 1
	}

	number, err := strconv.Atoi(args[0])
	if err != nil {
		c.UI.Error(fmt.Sprintf("Invalid issue number, it must be an integer but got: %s", args[0]))
		return 1
	}

	var date time.Time
	if dateArg != "" {
		d, err := time.Parse("2006-01-02", dateArg)
		if err != nil {
			c.UI.Error(fmt.Sprintf("Error, %s", err))
			return 1
		}
		date = d
	} else {
		// compute next Wednesday
		now := time.Now()
		wd := int(now.Weekday())
		date = now.AddDate(0, 0, 10-wd)
	}

	var directory string
	if directoryArg != "" {
		dir, _ := filepath.Abs(directoryArg)
		directory = dir
	} else {
		dir, err := os.Getwd()
		if err != nil {
			c.UI.Error(fmt.Sprintf("Error while retrieving the current directory: %s", err))
			return 1
		}
		directory = dir
	}

	t, err := template.New("issue").Parse(issueYAML)
	if err != nil {
		c.UI.Error(fmt.Sprintf("Error parsing template: %s", err))
		return 1
	}

	data := struct {
		Number     int
		Categories []string
	}{
		Number:     number,
		Categories: issue.DefaultCategories,
	}

	var out bytes.Buffer
	if err = t.Execute(&out, data); err != nil {
		c.UI.Error(fmt.Sprintf("Error generating YAML: %s", err))
		return 1
	}

	filename := path.Join(directory, fmt.Sprintf("%s.yml", date.Format("2006-01-02")))

	if err := ioutil.WriteFile(filename, out.Bytes(), 0644); err != nil {
		c.UI.Error(fmt.Sprintf("Error writing file: %s", err))
		return 1
	}

	c.UI.Output(fmt.Sprintf("Created new issue: %s ðŸ‘Œ", filename))

	return 0
}

// Help returns the description of the command.
func (*NewCommand) Help() string {
	helpText := `
Usage: msw new [options] ISSUE_NUMBER

  This command creates a new empty YAML file to prepare a new issue.

Options:

  -date=<date>			The date of the issue. Defaults to next Wednesday.

  -directory=path		The directory where to write the generated file.
				Defaults to current working directory.

`
	return strings.TrimSpace(helpText)
}

// Synopsis returns the short description of the command.
func (*NewCommand) Synopsis() string {
	return "create a new empty YAML file to prepare a new issue."
}

const issueYAML = `# Generated by msw
number: {{ .Number }}
welcome_text: >
  Hi!

categories:
{{- range .Categories }}
  - title: '{{ . }}'
    links:
      - name: ''
        url: ''
        abstract: ''
{{ end }}`
